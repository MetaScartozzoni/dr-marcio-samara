#!/usr/bin/env node

/**
 * ‚úÖ VERIFICADOR R√ÅPIDO: Testa se a migra√ß√£o foi bem-sucedida
 *
 * Este script verifica:
 * 1. Se as tabelas foram criadas corretamente
 * 2. Se os dados foram migrados
 * 3. Se as RLS policies est√£o ativas
 * 4. Se a estrutura est√° correta
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Erro: Vari√°veis de ambiente n√£o encontradas!');
    console.log('Certifique-se de ter:');
    console.log('  VITE_SUPABASE_URL');
    console.log('  VITE_SUPABASE_ANON_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarTabelas() {
    console.log('\nüìã VERIFICANDO TABELAS...\n');

    const tabelas = ['profiles', 'employees', 'patients'];

    for (const tabela of tabelas) {
        try {
            const { error } = await supabase
                .from(tabela)
                .select('*')
                .limit(1);

            if (error) {
                console.log(`‚ùå ${tabela}: Erro - ${error.message}`);
            } else {
                console.log(`‚úÖ ${tabela}: OK`);
            }
        } catch (error) {
            console.log(`‚ùå ${tabela}: Erro de conex√£o - ${error.message}`);
        }
    }
}

async function verificarEstrutura() {
    console.log('\nüèóÔ∏è VERIFICANDO ESTRUTURA...\n');

    try {
        // Verificar colunas da tabela profiles
        const { data: profilesData, error: profilesError } = await supabase
            .from('profiles')
            .select('*')
            .limit(1);

        if (profilesError) {
            console.log(`‚ùå Profiles: ${profilesError.message}`);
        } else if (profilesData && profilesData.length > 0) {
            const colunas = Object.keys(profilesData[0]);
            const colunasEsperadas = ['id', 'email', 'full_name', 'phone', 'date_of_birth', 'cpf', 'role', 'status', 'created_at', 'updated_at'];
            const colunasFaltando = colunasEsperadas.filter(col => !colunas.includes(col));

            if (colunasFaltando.length === 0) {
                console.log('‚úÖ Profiles: Todas as colunas presentes');
                console.log(`   üìä Colunas encontradas: ${colunas.join(', ')}`);
            } else {
                console.log(`‚ö†Ô∏è  Profiles: Colunas faltando: ${colunasFaltando.join(', ')}`);
            }
        }

        // Verificar employees
        const { error: employeesError } = await supabase
            .from('employees')
            .select('*')
            .limit(1);

        if (employeesError) {
            console.log(`‚ùå Employees: ${employeesError.message}`);
        } else {
            console.log('‚úÖ Employees: OK');
        }

        // Verificar patients
        const { error: patientsError } = await supabase
            .from('patients')
            .select('*')
            .limit(1);

        if (patientsError) {
            console.log(`‚ùå Patients: ${patientsError.message}`);
        } else {
            console.log('‚úÖ Patients: OK');
        }

    } catch (error) {
        console.log(`‚ùå Erro ao verificar estrutura: ${error.message}`);
    }
}

async function verificarDados() {
    console.log('\nüìä VERIFICANDO DADOS...\n');

    try {
        // Contagem de registros por tabela
        const { data: profilesCount, error: profilesCountError } = await supabase
            .from('profiles')
            .select('id', { count: 'exact', head: true });

        if (profilesCountError) {
            console.log(`‚ùå Profiles count: ${profilesCountError.message}`);
        } else {
            console.log(`‚úÖ Profiles: ${profilesCount} registros`);
        }

        // Distribui√ß√£o por role
        const { data: rolesData, error: rolesError } = await supabase
            .from('profiles')
            .select('role')
            .then(async ({ data, error }) => {
                if (error) return { data: null, error };

                const roles = data.reduce((acc, item) => {
                    acc[item.role] = (acc[item.role] || 0) + 1;
                    return acc;
                }, {});

                return { data: roles, error: null };
            });

        if (rolesError) {
            console.log(`‚ùå Roles: ${rolesError.message}`);
        } else {
            console.log('üìà Distribui√ß√£o por role:');
            Object.entries(rolesData).forEach(([role, count]) => {
                console.log(`   ‚Ä¢ ${role}: ${count}`);
            });
        }

        // Verificar employees
        const { data: employeesCount, error: employeesCountError } = await supabase
            .from('employees')
            .select('id', { count: 'exact', head: true });

        if (employeesCountError) {
            console.log(`‚ùå Employees count: ${employeesCountError.message}`);
        } else {
            console.log(`‚úÖ Employees: ${employeesCount} registros`);
        }

        // Verificar patients
        const { data: patientsCount, error: patientsCountError } = await supabase
            .from('patients')
            .select('id', { count: 'exact', head: true });

        if (patientsCountError) {
            console.log(`‚ùå Patients count: ${patientsCountError.message}`);
        } else {
            console.log(`‚úÖ Patients: ${patientsCount} registros`);
        }

    } catch (error) {
        console.log(`‚ùå Erro ao verificar dados: ${error.message}`);
    }
}

async function verificarIntegridade() {
    console.log('\nüîó VERIFICANDO INTEGRIDADE...\n');

    try {
        // Verificar se todos os funcion√°rios t√™m registro em employees
        const { data: funcionariosSemEmployee, error: funcError } = await supabase
            .from('profiles')
            .select('id, full_name, role')
            .in('role', ['admin', 'doctor', 'employee'])
            .then(async ({ data: profiles, error }) => {
                if (error) return { data: null, error };

                const ids = profiles.map(p => p.id);
                const { data: employees, error: empError } = await supabase
                    .from('employees')
                    .select('id')
                    .in('id', ids);

                if (empError) return { data: null, error: empError };

                const employeeIds = employees.map(e => e.id);
                const semEmployee = profiles.filter(p => !employeeIds.includes(p.id));

                return { data: semEmployee, error: null };
            });

        if (funcError) {
            console.log(`‚ùå Integridade funcion√°rios: ${funcError.message}`);
        } else if (funcionariosSemEmployee.length > 0) {
            console.log(`‚ö†Ô∏è  Funcion√°rios sem registro em employees: ${funcionariosSemEmployee.length}`);
            funcionariosSemEmployee.forEach(f => {
                console.log(`   ‚Ä¢ ${f.full_name} (${f.role})`);
            });
        } else {
            console.log('‚úÖ Todos os funcion√°rios t√™m registro em employees');
        }

        // Verificar se todos os pacientes t√™m registro em patients
        const { data: pacientesSemPatient, error: patError } = await supabase
            .from('profiles')
            .select('id, full_name, role')
            .eq('role', 'patient')
            .then(async ({ data: profiles, error }) => {
                if (error) return { data: null, error };

                const ids = profiles.map(p => p.id);
                const { data: patients, error: ptError } = await supabase
                    .from('patients')
                    .select('id')
                    .in('id', ids);

                if (ptError) return { data: null, error: ptError };

                const patientIds = patients.map(p => p.id);
                const semPatient = profiles.filter(p => !patientIds.includes(p.id));

                return { data: semPatient, error: null };
            });

        if (patError) {
            console.log(`‚ùå Integridade pacientes: ${patError.message}`);
        } else if (pacientesSemPatient.length > 0) {
            console.log(`‚ö†Ô∏è  Pacientes sem registro em patients: ${pacientesSemPatient.length}`);
            pacientesSemPatient.forEach(p => {
                console.log(`   ‚Ä¢ ${p.full_name}`);
            });
        } else {
            console.log('‚úÖ Todos os pacientes t√™m registro em patients');
        }

    } catch (error) {
        console.log(`‚ùå Erro ao verificar integridade: ${error.message}`);
    }
}

async function verificarPermissoes() {
    console.log('\nüîí VERIFICANDO PERMISS√ïES...\n');

    try {
        // Tentar uma opera√ß√£o que requer autentica√ß√£o
        const { error } = await supabase.auth.getUser();

        if (error) {
            console.log('‚ÑπÔ∏è  Usu√°rio n√£o autenticado (isso √© normal se estiver testando sem login)');
        } else {
            console.log('‚úÖ Usu√°rio autenticado');

            // Tentar acessar profiles
            const { error: profilesTestError } = await supabase
                .from('profiles')
                .select('id, full_name, role')
                .limit(1);

            if (profilesTestError) {
                console.log(`‚ùå Acesso a profiles: ${profilesTestError.message}`);
            } else {
                console.log('‚úÖ Acesso a profiles: OK');
            }
        }

        console.log('‚ÑπÔ∏è  Para testar RLS completamente, fa√ßa login primeiro');

    } catch (error) {
        console.log(`‚ùå Erro ao verificar permiss√µes: ${error.message}`);
    }
}

async function main() {
    console.log('üöÄ VERIFICADOR R√ÅPIDO DE MIGRA√á√ÉO\n');
    console.log('=====================================\n');

    try {
        await verificarTabelas();
        await verificarEstrutura();
        await verificarDados();
        await verificarIntegridade();
        await verificarPermissoes();

        console.log('\n=====================================');
        console.log('‚úÖ VERIFICA√á√ÉO CONCLU√çDA!');
        console.log('\nüìã RESUMO:');
        console.log('‚Ä¢ Se todas as verifica√ß√µes estiverem verdes (‚úÖ), a migra√ß√£o foi bem-sucedida!');
        console.log('‚Ä¢ Se houver alertas amarelos (‚ö†Ô∏è), revise os pontos mencionados');
        console.log('‚Ä¢ Se houver erros vermelhos (‚ùå), execute novamente a migra√ß√£o');

    } catch (error) {
        console.error('\n‚ùå ERRO GERAL:', error.message);
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    verificarTabelas,
    verificarEstrutura,
    verificarDados,
    verificarIntegridade,
    verificarPermissoes
};
