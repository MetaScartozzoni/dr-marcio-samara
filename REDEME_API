# API Centralizada - Cl√≠nica M√©dica

Esta API centralizada fornece endpoints seguros para todos os pain√©is do sistema (Admin, M√©dico, Secretaria, Paciente, Or√ßamento, Bot).

## üöÄ Como Usar

### 1. Configura√ß√£o
- Configure as vari√°veis de ambiente no arquivo `config.php`
- Execute o `database_schema.sql` no seu banco MySQL
- Configure o servidor web para apontar para `api/index.php`

### 2. Autentica√ß√£o
Todos os endpoints (exceto login/register) requerem autentica√ß√£o via JWT token no header:
```
Authorization: Bearer SEU_TOKEN_JWT
```

### 3. Estrutura de Resposta
Todas as respostas seguem o formato JSON:
```json
{
  "success": true,
  "data": {...},
  "message": "Opera√ß√£o realizada com sucesso"
}
```

## üìö Endpoints Principais

### Autentica√ß√£o
- `POST /auth/login` - Login de usu√°rio
- `POST /auth/register` - Registro de novo usu√°rio
- `GET /auth/me` - Dados do usu√°rio autenticado

### Usu√°rios
- `GET /users` - Listar usu√°rios
- `POST /users` - Criar usu√°rio
- `GET /users/{id}` - Obter usu√°rio espec√≠fico
- `PUT /users/{id}` - Atualizar usu√°rio
- `DELETE /users/{id}` - Deletar usu√°rio

### Pacientes
- `GET /patients` - Listar pacientes
- `POST /patients` - Criar paciente
- `GET /patients/{id}` - Obter paciente espec√≠fico
- `PUT /patients/{id}` - Atualizar paciente
- `DELETE /patients/{id}` - Deletar paciente

### Agendamentos
- `GET /appointments` - Listar agendamentos
- `POST /appointments` - Criar agendamento
- `GET /appointments/{id}` - Obter agendamento espec√≠fico
- `PUT /appointments/{id}` - Atualizar agendamento
- `DELETE /appointments/{id}` - Deletar agendamento

### Or√ßamentos
- `GET /budgets` - Listar or√ßamentos
- `POST /budgets` - Criar or√ßamento
- `GET /budgets/{id}` - Obter or√ßamento espec√≠fico
- `PUT /budgets/{id}` - Atualizar or√ßamento
- `PATCH /budgets/{id}/status` - Atualizar status do or√ßamento
- `DELETE /budgets/{id}` - Deletar or√ßamento

### Conversas e Mensagens
- `GET /conversations` - Listar conversas
- `POST /conversations` - Criar conversa
- `GET /messages` - Listar mensagens
- `POST /messages` - Enviar mensagem
- `PUT /messages/{id}` - Atualizar mensagem

### Notifica√ß√µes
- `GET /notifications` - Listar notifica√ß√µes do usu√°rio
- `POST /notifications/mark-read` - Marcar notifica√ß√µes como lidas

### Webhooks
- `POST /webhook/botconversa` - Webhook para bot de conversa
- Requer `X-API-Key` header para valida√ß√£o

### Dashboard
- `GET /dashboard/stats` - Estat√≠sticas do dashboard
- `GET /dashboard/monthly-report` - Relat√≥rio mensal

## üîí Seguran√ßa

### Medidas Implementadas:
- **Autentica√ß√£o JWT** com expira√ß√£o
- **Valida√ß√£o de API Key** para webhooks
- **Sanitiza√ß√£o de entrada** contra XSS/SQL Injection
- **CORS configurado** para dom√≠nios espec√≠ficos
- **Headers de seguran√ßa** (HSTS, X-Frame-Options, etc.)
- **Logs de auditoria** para todas as opera√ß√µes
- **Rate limiting** recomendado no servidor web

### Boas Pr√°ticas:
- Sempre use HTTPS em produ√ß√£o
- Valide todas as entradas no frontend
- Implemente rate limiting
- Monitore logs de auditoria regularmente

## üîß Configura√ß√£o de Produ√ß√£o

### Apache (.htaccess)
```apache
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ api/index.php [QSA,L]
```

### Nginx
```nginx
location /api/ {
    try_files /dev/null /api/index.php;
}
```

### Vari√°veis de Ambiente
```bash
export DB_HOST="localhost"
export DB_NAME="clinica_db"
export DB_USER="your_user"
export DB_PASSWORD="your_password"
export JWT_SECRET="your-jwt-secret"
export API_SECRET_KEY="your-api-key"
export STRIPE_SECRET_KEY="sk_test_..."
export WHEREBY_API_KEY="your-whereby-key"
```

## üìä Monitoramento

### Health Check
- `GET /health` - Status do sistema (implementar se necess√°rio)

### Logs
Todos os erros s√£o logados em `php_error_log`
Auditorias s√£o salvas na tabela `audit_logs`

## üöÄ Deploy

1. Configure o banco de dados
2. Fa√ßa upload dos arquivos API
3. Configure vari√°veis de ambiente
4. Configure o servidor web
5. Teste os endpoints

## üìù Exemplos de Uso

### Login
```bash
curl -X POST http://localhost/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@example.com","password":"password"}'
```

### Listar Pacientes
```bash
curl -X GET http://localhost/api/patients \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

### Criar Agendamento
```bash
curl -X POST http://localhost/api/appointments \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "patient_id": 1,
    "doctor_id": 2,
    "appointment_date": "2024-01-15 10:00:00",
    "title": "Consulta Inicial"
  }'
```

## üÜò Suporte

Para d√∫vidas ou problemas:
1. Verifique os logs de erro do PHP
2. Valide a configura√ß√£o do banco de dados
3. Teste a conectividade com o frontend
4. Consulte a documenta√ß√£o dos pain√©is individuais

---

**Nota:** Esta API foi projetada para ser escal√°vel e segura. Em produ√ß√£o, considere implementar cache (Redis), CDN para assets est√°ticos, e monitoramento avan√ßado.</content>
<parameter name="filePath">/Users/marciosamara/Documents/REVISAO PAINEL HOSTINGER/api/README.md
