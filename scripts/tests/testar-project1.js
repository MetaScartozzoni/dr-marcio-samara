// =====================================================
// TESTADOR DE CONEX√ÉO PROJECT 1
// Portal Dr. Marcio - Verificar URL P√∫blica
// =====================================================

require('dotenv').config();
const { Pool } = require('pg');

async function testarConexaoProject1() {
    console.log('üß™ TESTANDO CONEX√ÉO COM PROJECT 1');
    console.log('=================================\n');

    const urlBackup = process.env.DATABASE_URL_BACKUP;
    
    if (!urlBackup) {
        console.log('‚ùå DATABASE_URL_BACKUP n√£o configurada no .env');
        return;
    }

    console.log('üìã URL configurada:');
    // Mascarar senha para log seguro
    const urlMasked = urlBackup.replace(/:([^:@]+)@/, ':****@');
    console.log(`   ${urlMasked}`);

    // Verificar se √© URL interna (n√£o funciona externamente)
    if (urlBackup.includes('railway.internal')) {
        console.log('\n‚ö†Ô∏è PROBLEMA DETECTADO:');
        console.log('   A URL cont√©m "railway.internal" que √© apenas para uso interno');
        console.log('   Voc√™ precisa da URL P√öBLICA que termina com algo como:');
        console.log('   - xxx.proxy.rlwy.net:porta');
        console.log('   - viaduct.proxy.rlwy.net:porta');
        console.log('   - monorail.proxy.rlwy.net:porta');
        console.log('\nüí° COMO OBTER A URL P√öBLICA:');
        console.log('   1. No Railway Dashboard ‚Üí Project 1');
        console.log('   2. Clique no PostgreSQL');
        console.log('   3. Aba "Connect" (n√£o "Variables")');
        console.log('   4. Procure por "Public Networking" ou "External URL"');
        console.log('   5. Copie a URL que termina com .proxy.rlwy.net');
        return;
    }

    // Testar conex√£o
    try {
        console.log('\nüîç Testando conex√£o...');
        
        const pool = new Pool({
            connectionString: urlBackup,
            ssl: { rejectUnauthorized: false }
        });

        const client = await pool.connect();
        
        // Teste b√°sico
        const result = await client.query('SELECT NOW(), version()');
        console.log('‚úÖ CONEX√ÉO ESTABELECIDA COM SUCESSO!');
        console.log(`   üìÖ Hor√°rio: ${result.rows[0].now}`);
        console.log(`   üêò PostgreSQL: ${result.rows[0].version.split(' ')[1]}`);

        // Verificar estrutura
        const tablesResult = await client.query(`
            SELECT COUNT(*) as count 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        `);
        console.log(`   üìä Tabelas: ${tablesResult.rows[0].count}`);

        // Verificar se pode criar tabelas (permiss√µes)
        try {
            await client.query('CREATE TABLE IF NOT EXISTS backup_test (id SERIAL, created_at TIMESTAMP DEFAULT NOW())');
            await client.query('DROP TABLE backup_test');
            console.log('   ‚úÖ Permiss√µes: OK (pode criar/deletar tabelas)');
        } catch (permError) {
            console.log('   ‚ö†Ô∏è Permiss√µes: Limitadas');
        }

        client.release();
        await pool.end();

        console.log('\nüéâ PROJECT 1 PRONTO PARA BACKUP!');
        console.log('‚úÖ Pr√≥ximo passo: Executar sistema de backup');
        console.log('   Comando: node railway-backup-system.js');

    } catch (error) {
        console.log('\n‚ùå ERRO NA CONEX√ÉO:');
        console.log(`   ${error.message}`);
        
        if (error.code === 'ENOTFOUND') {
            console.log('\nüí° POSS√çVEIS CAUSAS:');
            console.log('   - Host n√£o encontrado (URL incorreta)');
            console.log('   - PostgreSQL ainda sendo criado');
            console.log('   - URL interna em vez da p√∫blica');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° POSS√çVEIS CAUSAS:');
            console.log('   - Porta incorreta');
            console.log('   - Servi√ßo n√£o inicializado');
        } else if (error.message.includes('authentication')) {
            console.log('\nüí° POSS√çVEIS CAUSAS:');
            console.log('   - Credenciais incorretas');
            console.log('   - Senha com caracteres especiais');
        }
    }
}

// Executar teste
testarConexaoProject1();
