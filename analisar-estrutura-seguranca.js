// An√°lise detalhada da estrutura das tabelas - Seguran√ßa e Conformidade
require('dotenv').config();
const { Pool } = require('pg');

console.log('üîç AN√ÅLISE DETALHADA DAS TABELAS - SEGURAN√áA E CONFORMIDADE\n');

async function analisarEstruturaCompleta() {
    const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: false
    });
    
    try {
        const client = await pool.connect();
        
        // 1. AN√ÅLISE DA TABELA USU√ÅRIOS (LOGIN/AUTH)
        console.log('üë§ AN√ÅLISE DA TABELA USU√ÅRIOS:');
        try {
            const usuarios = await client.query(`
                SELECT column_name, data_type, is_nullable, column_default, character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = 'usuarios' AND table_schema = 'public'
                ORDER BY ordinal_position
            `);
            
            if (usuarios.rows.length > 0) {
                console.log('   ‚úÖ Tabela usu√°rios encontrada:');
                usuarios.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.column_name} (${row.data_type}${row.character_maximum_length ? `(${row.character_maximum_length})` : ''}) - ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
                });
                
                // Verificar se tem colunas de seguran√ßa
                const colunasSeguranca = usuarios.rows.map(r => r.column_name);
                console.log('\n   üîê VERIFICA√á√ÉO DE SEGURAN√áA:');
                console.log(`   ‚Ä¢ Email: ${colunasSeguranca.includes('email') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Password/Senha: ${colunasSeguranca.includes('password') || colunasSeguranca.includes('senha') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Salt: ${colunasSeguranca.includes('salt') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Data cria√ß√£o: ${colunasSeguranca.includes('created_at') || colunasSeguranca.includes('data_criacao') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ √öltimo login: ${colunasSeguranca.includes('ultimo_login') || colunasSeguranca.includes('last_login') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Status ativo: ${colunasSeguranca.includes('ativo') || colunasSeguranca.includes('status') ? '‚úÖ' : '‚ùå'}`);
            } else {
                console.log('   ‚ùå Tabela usu√°rios n√£o encontrada');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao analisar usu√°rios:', error.message);
        }
        
        // 2. AN√ÅLISE DA TABELA FUNCION√ÅRIOS
        console.log('\nüë©‚Äç‚öïÔ∏è AN√ÅLISE DA TABELA FUNCION√ÅRIOS:');
        try {
            const funcionarios = await client.query(`
                SELECT column_name, data_type, is_nullable, character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = 'funcionarios' AND table_schema = 'public'
                ORDER BY ordinal_position
            `);
            
            if (funcionarios.rows.length > 0) {
                console.log('   ‚úÖ Tabela funcion√°rios encontrada:');
                funcionarios.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.column_name} (${row.data_type}${row.character_maximum_length ? `(${row.character_maximum_length})` : ''}) - ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
                });
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao analisar funcion√°rios:', error.message);
        }
        
        // 3. AN√ÅLISE DA TABELA PACIENTES (LGPD)
        console.log('\nüè• AN√ÅLISE DA TABELA PACIENTES (CONFORMIDADE LGPD):');
        try {
            const pacientes = await client.query(`
                SELECT column_name, data_type, is_nullable, character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = 'pacientes' AND table_schema = 'public'
                ORDER BY ordinal_position
            `);
            
            if (pacientes.rows.length > 0) {
                console.log('   ‚úÖ Tabela pacientes encontrada:');
                pacientes.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.column_name} (${row.data_type}${row.character_maximum_length ? `(${row.character_maximum_length})` : ''}) - ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
                });
                
                const colunasPacientes = pacientes.rows.map(r => r.column_name);
                console.log('\n   üõ°Ô∏è  VERIFICA√á√ÉO LGPD:');
                console.log(`   ‚Ä¢ CPF: ${colunasPacientes.includes('cpf') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Email: ${colunasPacientes.includes('email') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Telefone: ${colunasPacientes.includes('telefone') || colunasPacientes.includes('celular') ? '‚úÖ' : '‚ùå'}`);
                console.log(`   ‚Ä¢ Data nascimento: ${colunasPacientes.includes('data_nascimento') ? '‚úÖ' : '‚ùå'}`);
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao analisar pacientes:', error.message);
        }
        
        // 4. VERIFICAR TABELAS DE LOGS (AUDITORIA)
        console.log('\nüìä AN√ÅLISE DE LOGS E AUDITORIA:');
        const tabelasLogs = ['logs_acesso', 'logs_sistema', 'logs_exclusao_lgpd'];
        
        for (const tabela of tabelasLogs) {
            try {
                const logs = await client.query(`
                    SELECT column_name, data_type
                    FROM information_schema.columns 
                    WHERE table_name = $1 AND table_schema = 'public'
                    ORDER BY ordinal_position
                `, [tabela]);
                
                if (logs.rows.length > 0) {
                    console.log(`   ‚úÖ ${tabela}:`);
                    logs.rows.forEach(row => {
                        console.log(`     ‚Ä¢ ${row.column_name} (${row.data_type})`);
                    });
                } else {
                    console.log(`   ‚ùå ${tabela}: n√£o encontrada`);
                }
            } catch (error) {
                console.log(`   ‚ùå Erro ao analisar ${tabela}:`, error.message);
            }
        }
        
        // 5. VERIFICAR CONSTRAINTS E √çNDICES DE SEGURAN√áA
        console.log('\nüîí AN√ÅLISE DE CONSTRAINTS E √çNDICES:');
        try {
            const constraints = await client.query(`
                SELECT 
                    tc.table_name, 
                    tc.constraint_name, 
                    tc.constraint_type,
                    kcu.column_name
                FROM information_schema.table_constraints tc
                JOIN information_schema.key_column_usage kcu 
                    ON tc.constraint_name = kcu.constraint_name
                WHERE tc.table_schema = 'public' 
                AND tc.table_name IN ('usuarios', 'funcionarios', 'pacientes')
                ORDER BY tc.table_name, tc.constraint_type
            `);
            
            if (constraints.rows.length > 0) {
                console.log('   ‚úÖ Constraints encontradas:');
                constraints.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.table_name}.${row.column_name}: ${row.constraint_type} (${row.constraint_name})`);
                });
            } else {
                console.log('   ‚ö†Ô∏è  Nenhuma constraint encontrada');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao analisar constraints:', error.message);
        }
        
        // 6. VERIFICAR INTEGRA√á√ÉO ENTRE TABELAS
        console.log('\nüîó AN√ÅLISE DE INTEGRA√á√ÉO ENTRE TABELAS:');
        try {
            const foreignKeys = await client.query(`
                SELECT 
                    tc.table_name, 
                    kcu.column_name, 
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name 
                FROM information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                JOIN information_schema.constraint_column_usage AS ccu
                    ON ccu.constraint_name = tc.constraint_name
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND tc.table_schema = 'public'
                ORDER BY tc.table_name
            `);
            
            if (foreignKeys.rows.length > 0) {
                console.log('   ‚úÖ Chaves estrangeiras encontradas:');
                foreignKeys.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.table_name}.${row.column_name} ‚Üí ${row.foreign_table_name}.${row.foreign_column_name}`);
                });
            } else {
                console.log('   ‚ö†Ô∏è  Nenhuma chave estrangeira encontrada');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao analisar foreign keys:', error.message);
        }
        
        client.release();
        await pool.end();
        
        console.log('\nüéØ RESUMO DA AN√ÅLISE:');
        console.log('=====================================');
        console.log('üìã Verifique os itens acima para determinar:');
        console.log('   1. Se a tabela usu√°rios tem estrutura segura para login');
        console.log('   2. Se existe integra√ß√£o adequada entre usu√°rios/funcion√°rios');
        console.log('   3. Se logs de auditoria est√£o implementados');
        console.log('   4. Se constraints de seguran√ßa est√£o ativas');
        console.log('   5. Se estrutura est√° conforme LGPD');
        
    } catch (error) {
        console.log('‚ùå Erro na an√°lise:', error.message);
    }
}

analisarEstruturaCompleta();
