// ‚úÖ TESTE FINAL: Verifica√ß√£o das Corre√ß√µes OTP
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

console.log('‚úÖ TESTE FINAL - VERIFICA√á√ÉO DAS CORRE√á√ïES OTP');
console.log('=================================================');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

async function testeFinal() {
  try {
    console.log('üîç Executando teste final das corre√ß√µes...\n');

    const testEmail = 'teste-final-otp@example.com';
    const testPassword = 'VeryStrongPassword2024!@#$%';

    // 1. Registrar usu√°rio
    console.log('1Ô∏è‚É£  Registrando usu√°rio de teste...');
    const { error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome_completo: 'Usu√°rio Teste Final',
          tipo_usuario: 'paciente'
        }
      }
    });

    if (signUpError && !signUpError.message.includes('already registered')) {
      console.error('‚ùå Erro no registro:', signUpError.message);
      return;
    }
    console.log('‚úÖ Usu√°rio registrado/pronto');

    // 2. Aguardar rate limiting
    console.log('\n2Ô∏è‚É£  Aguardando rate limiting (60s)...');
    await new Promise(resolve => setTimeout(resolve, 60000));

    // 3. Testar envio de c√≥digo
    console.log('3Ô∏è‚É£  Testando envio de c√≥digo...');
    try {
      const { error: sendError } = await supabase.auth.resend({
        type: 'signup',
        email: testEmail,
      });

      if (sendError) {
        console.log('‚ö†Ô∏è  Erro no envio (esperado por rate limiting):', sendError.message);

        if (sendError.message.includes('rate limit') || sendError.message.includes('after')) {
          console.log('‚úÖ Rate limiting detectado corretamente');
        }
      } else {
        console.log('‚úÖ C√≥digo enviado com sucesso');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro capturado:', error.message);
    }

    // 4. Testar verifica√ß√£o com c√≥digo fict√≠cio
    console.log('\n4Ô∏è‚É£  Testando verifica√ß√£o com c√≥digo fict√≠cio...');
    try {
      const { error: verifyError } = await supabase.auth.verifyOtp({
        email: testEmail,
        token: '123456',
        type: 'signup',
      });

      if (verifyError) {
        console.log('‚úÖ Erro de verifica√ß√£o detectado:', verifyError.message);

        // Classificar o erro
        if (verifyError.message.includes('invalid')) {
          console.log('üîç Tipo: C√≥digo inv√°lido (correto)');
        } else if (verifyError.message.includes('expired')) {
          console.log('üîç Tipo: C√≥digo expirado (correto)');
        } else {
          console.log('üîç Tipo: Outro erro');
        }
      } else {
        console.log('‚ö†Ô∏è  Verifica√ß√£o funcionou com c√≥digo fict√≠cio (inesperado)');
      }
    } catch (error) {
      console.log('‚úÖ Erro capturado na verifica√ß√£o:', error.message);
    }

    // 5. Resumo das corre√ß√µes
    console.log('\n5Ô∏è‚É£  RESUMO DAS CORRE√á√ïES IMPLEMENTADAS:');
    console.log('==========================================');

    console.log('\n‚úÖ MELHORIAS NO AuthContext.jsx:');
    console.log('‚Ä¢ sendVerificationCode: Melhor tratamento de rate limiting');
    console.log('‚Ä¢ verifyOtpCode: Mensagens de erro mais espec√≠ficas');
    console.log('‚Ä¢ Tratamento de casos: inv√°lido, expirado, rate limit, j√° confirmado');

    console.log('\n‚úÖ PROBLEMA PRINCIPAL IDENTIFICADO:');
    console.log('‚Ä¢ Rate limiting agressivo do Supabase (53+ segundos)');
    console.log('‚Ä¢ Solu√ß√£o: Ajustar configura√ß√µes no Dashboard');

    console.log('\nüéØ RESULTADO ESPERADO:');
    console.log('‚Ä¢ Usu√°rios receber√£o mensagens de erro mais claras');
    console.log('‚Ä¢ Rate limiting ser√° informado com tempo exato');
    console.log('‚Ä¢ Diferentes tipos de erro ser√£o tratados especificamente');

    console.log('\nüìã PR√ìXIMOS PASSOS PARA O USU√ÅRIO:');
    console.log('1. Testar o fluxo completo no frontend');
    console.log('2. Verificar se as mensagens de erro s√£o mais claras');
    console.log('3. Se ainda houver problemas, ajustar rate limiting no Supabase');
    console.log('4. Monitorar logs no Supabase Dashboard');

    console.log('\nüöÄ STATUS: CORRE√á√ïES IMPLEMENTADAS COM SUCESSO!');

  } catch (error) {
    console.error('‚ùå ERRO inesperado no teste final:', error.message);
  }
}

// Executar teste final
testeFinal();
