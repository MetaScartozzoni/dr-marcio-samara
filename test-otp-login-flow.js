// test-otp-login-flow.js
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üîê TESTE COMPLETO DO FLUXO OTP LOGIN');
console.log('=====================================\n');

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testOTPLoginFlow() {
  const testEmail = `test-otp-${Date.now()}@example.com`;
  const testPassword = 'TestPassword123!@#Strong2024';

  console.log('üìß Email de teste:', testEmail);
  console.log('üîë Senha de teste:', testPassword.replace(/./g, '*'));

  try {
    // 1. Criar usu√°rio
    console.log('\n1Ô∏è‚É£  Criando usu√°rio...');
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome_completo: 'Test User OTP',
          tipo_usuario: 'paciente'
        }
      }
    });

    if (signupError) {
      console.log('‚ùå Erro no signup:', signupError.message);
      return;
    }

    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log('   ID:', signupData.user?.id);
    console.log('   Email confirmado:', signupData.user?.email_confirmed_at ? 'Sim' : 'N√£o');

    // 2. Fazer login com senha
    console.log('\n2Ô∏è‚É£  Fazendo login com senha...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (loginError) {
      console.log('‚ùå Erro no login:', loginError.message);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso!');
    console.log('   Token de acesso:', loginData.session?.access_token ? 'Presente' : 'Ausente');
    console.log('   Token de refresh:', loginData.session?.refresh_token ? 'Presente' : 'Ausente');

    // 3. Testar renova√ß√£o de token
    console.log('\n3Ô∏è‚É£  Testando renova√ß√£o de token...');
    const { error: refreshError } = await supabase.auth.refreshSession({
      refresh_token: loginData.session.refresh_token
    });

    if (refreshError) {
      console.log('‚ùå Erro na renova√ß√£o:', refreshError.message);
    } else {
      console.log('‚úÖ Token renovado com sucesso!');
    }

    // 4. Logout
    console.log('\n4Ô∏è‚É£  Fazendo logout...');
    const { error: logoutError } = await supabase.auth.signOut();

    if (logoutError) {
      console.log('‚ùå Erro no logout:', logoutError.message);
    } else {
      console.log('‚úÖ Logout realizado com sucesso!');
    }

    // 5. Verificar se ainda h√° sess√£o
    console.log('\n5Ô∏è‚É£  Verificando sess√£o ap√≥s logout...');
    const { data: sessionData } = await supabase.auth.getSession();

    console.log('   Sess√£o ativa:', sessionData.session ? 'Sim' : 'N√£o');

    console.log('\nüéâ FLUXO OTP LOGIN CONCLU√çDO COM SUCESSO!');

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
  }
}

testOTPLoginFlow().catch(console.error);
