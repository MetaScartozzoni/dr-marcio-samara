// üîç DIAGN√ìSTICO: Erro na Verifica√ß√£o de C√≥digo OTP
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

console.log('üîç DIAGN√ìSTICO DE ERRO NA VERIFICA√á√ÉO OTP');
console.log('==========================================');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

async function diagnosticarErroOtp() {
  try {
    console.log('üîç Iniciando diagn√≥stico...\n');

    // Teste 1: Verificar configura√ß√£o atual
    console.log('1Ô∏è‚É£  Verificando configura√ß√£o do Supabase...');
    const { error: configError } = await supabase.auth.getSession();

    if (configError) {
      console.error('‚ùå Erro de configura√ß√£o:', configError.message);
      return;
    }
    console.log('‚úÖ Configura√ß√£o OK');

    // Teste 2: Simular fluxo completo
    console.log('\n2Ô∏è‚É£  Simulando fluxo completo de registro + verifica√ß√£o...');
    const testEmail = `diag-otp-${Date.now()}@example.com`;
    const testPassword = 'VeryStrongPassword2024!@#$%';

    console.log(`üìß Email de teste: ${testEmail}`);

    // Registrar usu√°rio
    console.log('üìù Registrando usu√°rio...');
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome_completo: 'Usu√°rio Diagn√≥stico',
          tipo_usuario: 'paciente'
        }
      }
    });

    if (signUpError) {
      console.error('‚ùå Erro no registro:', signUpError.message);

      if (signUpError.message.includes('rate limit')) {
        console.log('üö® SOLU√á√ÉO: Aguarde 15-30 minutos antes de tentar novamente');
        console.log('üí° Dica: Verifique os limites de rate no Supabase Dashboard');
      }

      return;
    }

    console.log('‚úÖ Usu√°rio registrado com sucesso!');
    console.log(`üë§ User ID: ${signUpData.user?.id}`);
    console.log(`üìß Email confirmado: ${signUpData.user?.email_confirmed_at ? 'Sim' : 'N√£o'}`);

    // Aguardar um pouco
    console.log('‚è≥ Aguardando 5 segundos...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // Teste 3: Tentar diferentes tipos de verifica√ß√£o
    console.log('\n3Ô∏è‚É£  Testando diferentes tipos de verifica√ß√£o...');

    // Primeiro, tentar reenviar c√≥digo
    console.log('üîÑ Enviando c√≥digo de verifica√ß√£o...');
    const { error: resendError } = await supabase.auth.resend({
      type: 'signup',
      email: testEmail,
    });

    if (resendError) {
      console.error('‚ùå Erro ao enviar c√≥digo:', resendError.message);

      if (resendError.message.includes('rate limit')) {
        console.log('üö® RATE LIMIT: Muitos c√≥digos enviados recentemente');
        return;
      }

      // Tentar outros tipos
      console.log('üîÑ Tentando outros tipos de reenvio...');

      const tipos = ['email', 'recovery'];
      for (const tipo of tipos) {
        console.log(`üîÑ Tentando tipo: ${tipo}`);
        const { error: tipoError } = await supabase.auth.resend({
          type: tipo,
          email: testEmail,
        });

        if (!tipoError) {
          console.log(`‚úÖ Tipo ${tipo} funcionou!`);
          break;
        } else {
          console.log(`‚ùå Tipo ${tipo} falhou: ${tipoError.message}`);
        }
      }
    } else {
      console.log('‚úÖ C√≥digo enviado com sucesso!');
    }

    // Aguardar c√≥digo chegar
    console.log('‚è≥ Aguardando 3 segundos para o email chegar...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // Teste 4: Simular verifica√ß√£o com c√≥digo fict√≠cio
    console.log('\n4Ô∏è‚É£  Testando verifica√ß√£o com c√≥digo fict√≠cio...');
    const codigoFicticio = '123456';

    try {
      await supabase.auth.verifyOtp({
        email: testEmail,
        token: codigoFicticio,
        type: 'signup',
      });

      console.log('‚úÖ Verifica√ß√£o funcionou (inesperado com c√≥digo fict√≠cio)');
    } catch (error) {
      console.error('‚ùå Erro inesperado na verifica√ß√£o:', error.message);
    }

    // Teste 5: Verificar configura√ß√£o do projeto
    console.log('\n5Ô∏è‚É£  Verificando configura√ß√£o do projeto...');

    // Verificar se o usu√°rio existe
    const { data: userData, error: userError } = await supabase
      .from('auth.users')
      .select('*')
      .eq('email', testEmail)
      .single();

    if (userError) {
      console.log('‚ö†Ô∏è  Nota: N√£o foi poss√≠vel verificar usu√°rio na tabela auth');
    } else {
      console.log('‚úÖ Usu√°rio encontrado na base de dados');
      console.log(`üìß Email confirmado: ${userData.email_confirmed_at ? 'Sim' : 'N√£o'}`);
      console.log(`üìÖ Criado em: ${userData.created_at}`);
    }

  } catch (error) {
    console.error('‚ùå ERRO inesperado no diagn√≥stico:', error.message);
  }

  // An√°lise final e recomenda√ß√µes
  console.log('\nüéØ AN√ÅLISE FINAL E RECOMENDA√á√ïES');
  console.log('==================================');

  console.log('\nüîß POSS√çVEIS CAUSAS DO ERRO:');
  console.log('1. ‚úÖ Tipo de verifica√ß√£o incorreto (signup vs email)');
  console.log('2. ‚úÖ C√≥digo expirado (padr√£o: 1 hora)');
  console.log('3. ‚úÖ Rate limiting do Supabase');
  console.log('4. ‚úÖ Configura√ß√£o incorreta do projeto');
  console.log('5. ‚úÖ Problema na implementa√ß√£o do verifyOtpCode');

  console.log('\nüí° SOLU√á√ïES RECOMENDADAS:');
  console.log('1. Verificar o tipo correto no Supabase Dashboard');
  console.log('2. Aumentar tempo de expira√ß√£o se necess√°rio');
  console.log('3. Verificar logs no Supabase Dashboard');
  console.log('4. Testar com diferentes tipos de verifica√ß√£o');
  console.log('5. Verificar configura√ß√£o de rate limiting');

  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('1. Execute este diagn√≥stico: node diagnostico-otp-erro.js');
  console.log('2. Verifique os logs no Supabase Dashboard');
  console.log('3. Teste com um email real');
  console.log('4. Ajuste a implementa√ß√£o conforme necess√°rio');

  console.log('\nüìû SUPORTE:');
  console.log('Se o problema persistir, verifique:');
  console.log('- Supabase Dashboard > Authentication > Logs');
  console.log('- Configura√ß√µes de rate limiting');
  console.log('- Templates de email ativos');
}

// Executar diagn√≥stico
diagnosticarErroOtp();
