// üîç TESTE SIMPLES DE CONECTIVIDADE SUPABASE
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üîç TESTE B√ÅSICO DE CONECTIVIDADE SUPABASE');
console.log('==========================================');

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

console.log('üìã CONFIGURA√á√ïES:');
console.log(`   URL: ${supabaseUrl ? '‚úÖ Definida' : '‚ùå N√£o definida'}`);
console.log(`   KEY: ${supabaseKey ? '‚úÖ Definida (' + supabaseKey.length + ' chars)' : '‚ùå N√£o definida'}`);

if (!supabaseUrl || !supabaseKey) {
  console.error('\n‚ùå ERRO: Vari√°veis de ambiente n√£o encontradas!');
  console.log('üí° Verifique o arquivo .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testeBasico() {
  try {
    console.log('\nüîç Testando conex√£o b√°sica...');

    // Teste 1: Verificar sess√£o atual (n√£o requer tabelas)
    const { data: session, error: sessionError } = await supabase.auth.getSession();

    if (sessionError) {
      console.error('‚ùå Erro na sess√£o:', sessionError.message);
      return;
    }

    console.log('‚úÖ Conex√£o b√°sica OK');
    console.log(`   Sess√£o: ${session.session ? 'Ativa' : 'Inativa'}`);

    // Teste 2: Tentar fazer uma consulta simples que n√£o depende de tabelas espec√≠ficas
    console.log('\nüîç Testando consulta simples...');

    // Vamos tentar consultar uma tabela que sabemos que pode existir
    const tablesToTest = ['usuarios', 'profiles', 'consultas'];

    for (const table of tablesToTest) {
      try {
        const { error } = await supabase
          .from(table)
          .select('count')
          .limit(1);

        if (error) {
          if (error.message.includes('Could not find the table')) {
            console.log(`   ${table}: ‚ùå Tabela n√£o existe`);
          } else if (error.message.includes('permission denied')) {
            console.log(`   ${table}: ‚ö†Ô∏è  Sem permiss√£o`);
          } else {
            console.log(`   ${table}: ‚ö†Ô∏è  ${error.message}`);
          }
        } else {
          console.log(`   ${table}: ‚úÖ OK`);
        }
      } catch (e) {
        console.log(`   ${table}: ‚ùå Erro - ${e.message}`);
      }
    }

    // Teste 3: Verificar se podemos fazer uma opera√ß√£o de escrita simples
    console.log('\nüîç Testando capacidades...');

    // Tentar criar um usu√°rio de teste (vamos cancelar se funcionar)
    const testEmail = `test-connectivity-${Date.now()}@example.com`;
    const testPassword = 'TestPassword123!';

    console.log('   Criando usu√°rio de teste...');
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: 'Teste Conectividade',
          tipo_usuario: 'paciente'
        }
      }
    });

    if (signUpError) {
      if (signUpError.message.includes('rate limit')) {
        console.log('   ‚ö†Ô∏è  Rate limit atingido (aguarde alguns minutos)');
      } else {
        console.log(`   ‚ùå Erro no cadastro: ${signUpError.message}`);
      }
    } else {
      console.log('   ‚úÖ Cadastro OK');
      console.log(`   üë§ User ID: ${signUpData.user?.id}`);

      // Limpar o usu√°rio de teste
      if (signUpData.user?.id) {
        console.log('   üßπ Limpando usu√°rio de teste...');
        // Note: Em produ√ß√£o, voc√™ usaria service role key para deletar
        console.log('   ‚ÑπÔ∏è  Usu√°rio de teste criado (ser√° limpo manualmente se necess√°rio)');
      }
    }

    console.log('\nüéØ DIAGN√ìSTICO:');
    console.log('===============');

    if (sessionError) {
      console.log('‚ùå Problema de conectividade');
      console.log('üí° Verifique:');
      console.log('   - URL do Supabase est√° correta');
      console.log('   - Chave anon key est√° v√°lida');
      console.log('   - Conex√£o com internet OK');
    } else {
      console.log('‚úÖ Conectividade b√°sica funcionando');
      console.log('üí° Status das tabelas:');
      console.log('   - Se tabelas n√£o existem: Execute os comandos SQL');
      console.log('   - Se sem permiss√£o: Verifique RLS policies');
    }

    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('===================');
    console.log('1. Se conectividade OK: Execute comandos SQL no Supabase Dashboard');
    console.log('2. Se erro de conex√£o: Verifique credenciais no .env');
    console.log('3. Teste novamente ap√≥s corre√ß√µes');

  } catch (error) {
    console.error('‚ùå ERRO INESPERADO:', error.message);
  }
}

testeBasico();
