// test/payment.test.js
const paymentService = require('../src/services/payment.service.js');
const emailService = require('../src/services/email-formatted.service.js');
const smsService = require('../src/services/sms.service.js');

async function testarSistemaPagamentos() {
  console.log('üß™ TESTE DO SISTEMA DE PAGAMENTOS');
  console.log('=' .repeat(50));

  try {
    // 1. Testar configura√ß√£o dos gateways
    console.log('\n1Ô∏è‚É£ Testando configura√ß√£o dos gateways...');
    const configTeste = await paymentService.testarConfiguracao();
    
    console.log('üì± Stripe:', configTeste.stripe ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('üè¶ PagSeguro:', configTeste.pagseguro ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

    // 2. Criar dados de teste para or√ßamento
    console.log('\n2Ô∏è‚É£ Preparando dados de teste...');
    const dadosOrcamento = {
      numero_orcamento: 'ORC-2025-0001',
      valor_final: 1500.00,
      observacoes: 'Rinoplastia - Procedimento de teste',
      paciente_id: 1,
      paciente_email: 'teste@example.com',
      paciente_nome: 'Jo√£o Silva',
      paciente_telefone: '+5511999999999'
    };
    console.log('üìã Or√ßamento de teste criado:', dadosOrcamento.numero_orcamento);

    // 3. Testar cria√ß√£o de sess√£o Stripe
    console.log('\n3Ô∏è‚É£ Testando sess√£o Stripe...');
    const stripeSession = await paymentService.criarSessaoStripe(1, dadosOrcamento);
    
    if (stripeSession.sucesso) {
      console.log('‚úÖ Sess√£o Stripe criada com sucesso');
      console.log('üîó URL de checkout:', stripeSession.checkout_url);
    } else {
      console.log('‚ùå Erro na sess√£o Stripe:', stripeSession.erro);
    }

    // 4. Testar cria√ß√£o de pagamento PagSeguro
    console.log('\n4Ô∏è‚É£ Testando pagamento PagSeguro...');
    const pagseguroPayment = await paymentService.criarPagamentoPagSeguro(1, dadosOrcamento);
    
    if (pagseguroPayment.sucesso) {
      console.log('‚úÖ Pagamento PagSeguro criado com sucesso');
      console.log('üîó URL de checkout:', pagseguroPayment.checkout_url);
    } else {
      console.log('‚ùå Erro no PagSeguro:', pagseguroPayment.erro);
    }

    // 5. Testar envio de confirma√ß√£o por email
    console.log('\n5Ô∏è‚É£ Testando email de confirma√ß√£o...');
    try {
      await emailService.enviarConfirmacaoPagamento({
        email: 'teste@example.com',
        nome: 'Jo√£o Silva - Teste',
        numeroOrcamento: 'ORC-2025-0001',
        valor: 1500.00
      });
      console.log('‚úÖ Email de confirma√ß√£o enviado');
    } catch (error) {
      console.log('‚ùå Erro no email:', error.message);
    }

    // 6. Testar envio de confirma√ß√£o por SMS
    console.log('\n6Ô∏è‚É£ Testando SMS de confirma√ß√£o...');
    try {
      const smsResult = await smsService.enviarConfirmacaoPagamento({
        telefone: '+5511932357636',
        nome: 'Jo√£o Silva - Teste',
        numeroOrcamento: 'ORC-2025-0001',
        valor: 1500.00
      });
      
      if (smsResult.sucesso) {
        console.log('‚úÖ SMS de confirma√ß√£o enviado');
        console.log('üì® Message ID:', smsResult.messageId);
      } else {
        console.log('‚ùå Erro no SMS:', smsResult.erro);
      }
    } catch (error) {
      console.log('‚ùå Erro no SMS:', error.message);
    }

    console.log('\nüéâ TESTE COMPLETO!');
    console.log('=' .repeat(50));
    
    // Resumo das funcionalidades
    console.log('\nüìã FUNCIONALIDADES DISPON√çVEIS:');
    console.log('‚úÖ Cria√ß√£o de sess√µes de pagamento Stripe');
    console.log('‚úÖ Cria√ß√£o de pagamentos PagSeguro');
    console.log('‚úÖ Webhooks para ambos os gateways');
    console.log('‚úÖ Confirma√ß√£o autom√°tica por email e SMS');
    console.log('‚úÖ P√°gina de checkout integrada');
    console.log('‚úÖ Relat√≥rios de pagamentos');
    console.log('‚úÖ Gest√£o de status de pagamentos');

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Configure as credenciais reais do Stripe e PagSeguro no .env');
    console.log('2. Execute o schema do banco de dados: database-schema-payments.sql');
    console.log('3. Integre as rotas de pagamento no servidor principal');
    console.log('4. Configure os webhooks nos dashboards dos gateways');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

// Executar teste se o arquivo for chamado diretamente
if (require.main === module) {
  testarSistemaPagamentos();
}

module.exports = { testarSistemaPagamentos };
