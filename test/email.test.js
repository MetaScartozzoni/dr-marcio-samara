// test/email.test.js
const emailService = require('../src/services/email.service');

async function testarEmailService() {
  console.log('üß™ Testando Servi√ßo de Email...\n');

  try {
    // 1. Testar configura√ß√£o
    console.log('1Ô∏è‚É£ Testando configura√ß√£o SMTP...');
    const configValida = await emailService.testarConfiguracao();
    
    if (configValida) {
      console.log('‚úÖ Configura√ß√£o SMTP v√°lida\n');
    } else {
      console.log('‚ùå Erro na configura√ß√£o SMTP\n');
      return;
    }

    // 2. Testar email de confirma√ß√£o de agendamento
    console.log('2Ô∏è‚É£ Testando email de confirma√ß√£o de agendamento...');
    try {
      const resultadoConfirmacao = await emailService.enviarConfirmacaoAgendamento({
        email: 'teste@exemplo.com',
        nome: 'Jo√£o Silva',
        servico: 'Consulta Odontol√≥gica',
        data: new Date(),
        agendamentoId: '12345'
      });
      console.log('‚úÖ Email de confirma√ß√£o enviado:', resultadoConfirmacao.messageId);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao enviar confirma√ß√£o (normal se n√£o tiver template):', error.message);
    }

    // 3. Testar email de lembrete
    console.log('\n3Ô∏è‚É£ Testando email de lembrete...');
    try {
      const resultadoLembrete = await emailService.enviarLembreteAgendamento({
        email: 'teste@exemplo.com',
        nome: 'Maria Santos',
        servico: 'Limpeza Dental',
        data: new Date()
      });
      console.log('‚úÖ Email de lembrete enviado:', resultadoLembrete.messageId);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao enviar lembrete (normal se n√£o tiver template):', error.message);
    }

    // 4. Testar email de or√ßamento
    console.log('\n4Ô∏è‚É£ Testando email de or√ßamento...');
    try {
      const resultadoOrcamento = await emailService.enviarOrcamento({
        email: 'teste@exemplo.com',
        nome: 'Carlos Oliveira',
        numeroOrcamento: 'ORC-001',
        valorTotal: 250.00,
        validade: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        linkVisualizacao: 'http://localhost:3000/orcamento/ORC-001',
        linkAceite: 'http://localhost:3000/aceitar/ORC-001',
        observacoes: 'Or√ßamento v√°lido por 30 dias'
      });
      console.log('‚úÖ Email de or√ßamento enviado:', resultadoOrcamento.messageId);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao enviar or√ßamento (normal se n√£o tiver template):', error.message);
    }

    // 5. Testar emails com HTML inline (que n√£o dependem de templates)
    console.log('\n5Ô∏è‚É£ Testando emails com HTML inline...');
    
    try {
      const resultadoCancelamento = await emailService.enviarCancelamentoAgendamento({
        email: 'teste@exemplo.com',
        nome: 'Ana Costa',
        servico: 'Consulta de Rotina',
        data: '25/12/2024',
        hora: '14:30',
        motivo: 'Reagendamento a pedido do paciente'
      });
      console.log('‚úÖ Email de cancelamento enviado:', resultadoCancelamento.messageId);
    } catch (error) {
      console.log('‚ùå Erro ao enviar cancelamento:', error.message);
    }

    try {
      const resultadoReagendamento = await emailService.enviarReagendamento({
        email: 'teste@exemplo.com',
        nome: 'Pedro Lima',
        servico: 'Extra√ß√£o Dent√°ria',
        dataAnterior: '20/12/2024',
        horaAnterior: '10:00',
        dataNova: '22/12/2024',
        horaNova: '15:30'
      });
      console.log('‚úÖ Email de reagendamento enviado:', resultadoReagendamento.messageId);
    } catch (error) {
      console.log('‚ùå Erro ao enviar reagendamento:', error.message);
    }

    try {
      const resultadoLembrete24h = await emailService.enviarLembrete24h({
        email: 'teste@exemplo.com',
        nome: 'Lucia Fernandes',
        servico: 'Clareamento Dental',
        data: 'Amanh√£ (26/12/2024)',
        hora: '09:00'
      });
      console.log('‚úÖ Email de lembrete 24h enviado:', resultadoLembrete24h.messageId);
    } catch (error) {
      console.log('‚ùå Erro ao enviar lembrete 24h:', error.message);
    }

    console.log('\nüéâ Testes do servi√ßo de email conclu√≠dos!');
    console.log('\nüìù Notas:');
    console.log('- Emails com templates Handlebars podem falhar se os arquivos .hbs n√£o existirem');
    console.log('- Emails com HTML inline devem funcionar normalmente');
    console.log('- Verifique se as vari√°veis de ambiente est√£o configuradas corretamente');
    console.log('- Para produ√ß√£o, substitua teste@exemplo.com por emails reais');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testarEmailService();
}

module.exports = { testarEmailService };
