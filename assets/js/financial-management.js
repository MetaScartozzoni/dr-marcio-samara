// üí∞ Exemplos de uso das Edge Functions para gest√£o financeira

// Exemplo 1: Buscar transa√ß√µes financeiras
async function buscarTransacoes(filters = {}) {
    try {
        // Chamar a Edge Function
        const result = await window.EdgeFunctionsClient.call(
            window.PORTAL_CONFIG.EDGE_FUNCTIONS.FINANCE_GET_TRANSACTIONS,
            filters
        );
        
        // Verificar se a chamada foi bem-sucedida
        if (!result.success) {
            throw new Error(result.error || 'Erro ao buscar transa√ß√µes');
        }
        
        return {
            success: true,
            transactions: result.transactions || [],
            total: result.total || 0,
            summary: result.summary || {}
        };
    } catch (error) {
        console.error('Erro ao buscar transa√ß√µes financeiras:', error);
        return {
            success: false,
            error: error.message,
            transactions: []
        };
    }
}

// Exemplo 2: Criar nova transa√ß√£o
async function criarTransacao(transactionData) {
    try {
        // Validar dados m√≠nimos
        if (!transactionData.amount || !transactionData.type || !transactionData.description) {
            throw new Error('Valor, tipo e descri√ß√£o s√£o obrigat√≥rios');
        }
        
        // Chamar a Edge Function
        const result = await window.EdgeFunctionsClient.call(
            window.PORTAL_CONFIG.EDGE_FUNCTIONS.FINANCE_CREATE_TRANSACTION, 
            { transaction: transactionData }
        );
        
        // Verificar se a chamada foi bem-sucedida
        if (!result.success) {
            throw new Error(result.error || 'Erro ao criar transa√ß√£o');
        }
        
        return {
            success: true,
            transaction: result.transaction,
            message: 'Transa√ß√£o criada com sucesso'
        };
    } catch (error) {
        console.error('Erro ao criar transa√ß√£o financeira:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Exemplo 3: Atualizar status de transa√ß√£o
async function atualizarStatusTransacao(transactionId, newStatus, comments = '') {
    try {
        // Validar par√¢metros
        if (!transactionId || !newStatus) {
            throw new Error('ID da transa√ß√£o e novo status s√£o obrigat√≥rios');
        }
        
        // Chamar a Edge Function
        const result = await window.EdgeFunctionsClient.call(
            window.PORTAL_CONFIG.EDGE_FUNCTIONS.FINANCE_UPDATE_TRANSACTION_STATUS,
            { 
                transaction_id: transactionId,
                status: newStatus,
                comments
            }
        );
        
        // Verificar se a chamada foi bem-sucedida
        if (!result.success) {
            throw new Error(result.error || 'Erro ao atualizar status da transa√ß√£o');
        }
        
        return {
            success: true,
            transaction: result.transaction,
            message: 'Status da transa√ß√£o atualizado com sucesso'
        };
    } catch (error) {
        console.error(`Erro ao atualizar status da transa√ß√£o ${transactionId}:`, error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Exemplo 4: Gerar relat√≥rio financeiro
async function gerarRelatorioFinanceiro(period, filters = {}) {
    try {
        // Validar par√¢metros
        if (!period) {
            throw new Error('Per√≠odo √© obrigat√≥rio');
        }
        
        // Preparar dados para a requisi√ß√£o
        const requestData = {
            period,
            ...filters
        };
        
        // Chamar a Edge Function
        const result = await window.EdgeFunctionsClient.call(
            window.PORTAL_CONFIG.EDGE_FUNCTIONS.FINANCE_GENERATE_REPORT,
            requestData
        );
        
        // Verificar se a chamada foi bem-sucedida
        if (!result.success) {
            throw new Error(result.error || 'Erro ao gerar relat√≥rio financeiro');
        }
        
        return {
            success: true,
            report: result.report,
            summary: result.summary,
            charts: result.charts
        };
    } catch (error) {
        console.error('Erro ao gerar relat√≥rio financeiro:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Exemplo 5: Gerar or√ßamento para paciente
async function gerarOrcamento(budgetData) {
    try {
        // Validar dados m√≠nimos
        if (!budgetData.patient_id || !budgetData.items || budgetData.items.length === 0) {
            throw new Error('Paciente e itens s√£o obrigat√≥rios');
        }
        
        // Chamar a Edge Function
        const result = await window.EdgeFunctionsClient.call(
            window.PORTAL_CONFIG.EDGE_FUNCTIONS.FINANCE_GENERATE_BUDGET,
            { budget: budgetData }
        );
        
        // Verificar se a chamada foi bem-sucedida
        if (!result.success) {
            throw new Error(result.error || 'Erro ao gerar or√ßamento');
        }
        
        return {
            success: true,
            budget: result.budget,
            pdfUrl: result.pdf_url,
            message: 'Or√ßamento gerado com sucesso'
        };
    } catch (error) {
        console.error('Erro ao gerar or√ßamento:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Exportar fun√ß√µes para uso global
window.PortalFinanceiro = {
    buscarTransacoes,
    criarTransacao,
    atualizarStatusTransacao,
    gerarRelatorioFinanceiro,
    gerarOrcamento
};

console.log('üöÄ Portal Financeiro inicializado');
