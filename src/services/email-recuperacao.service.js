// =====================================================
// SERVI√áO DE EMAIL PARA RECUPERA√á√ÉO DE SENHA
// Portal Dr. Marcio - Sistema M√©dico Integrado
// Data: 01/08/2025
// =====================================================

const sgMail = require('@sendgrid/mail');
const nodemailer = require('nodemailer');
require('dotenv').config();

class EmailRecuperacaoService {
    constructor() {
        // Configurar SendGrid (Produ√ß√£o)
        if (process.env.SENDGRID_API_KEY) {
            sgMail.setApiKey(process.env.SENDGRID_API_KEY);
            this.providerPrimario = 'sendgrid';
            console.log('üìß Email configurado: SendGrid (Produ√ß√£o)');
        } else {
            this.providerPrimario = 'smtp';
            console.log('üìß Email configurado: SMTP/Nodemailer (Desenvolvimento)');
        }

        // Configurar SMTP como fallback
        this.transporterSMTP = nodemailer.createTransport({
            host: process.env.SMTP_HOST || 'smtp.sendgrid.net',
            port: parseInt(process.env.SMTP_PORT) || 587,
            secure: process.env.SMTP_SECURE === 'true' || false,
            auth: {
                user: process.env.SMTP_USER || 'apikey',
                pass: process.env.SMTP_PASS || process.env.SENDGRID_API_KEY
            }
        });

        // Configura√ß√µes da cl√≠nica
        this.emailFrom = process.env.EMAIL_FROM || 'clinica@mscartozzoni.com.br';
        this.emailFromName = process.env.EMAIL_FROM_NAME || 'Portal Dr. Marcio';
        this.clinicaNome = process.env.CLINICA_NOME || 'Dr. Marcio Scartozzoni';
        this.clinicaTelefone = process.env.TELEFONE_CLINICA || '(11) 99999-9999';
        this.clinicaEndereco = process.env.ENDERECO_CLINICA || 'Consult√≥rio M√©dico';
        this.adminEmail = process.env.ADMIN_EMAIL || 'clinica@mscartozzoni.com.br';
    }

    /**
     * Enviar c√≥digo de recupera√ß√£o por email
     */
    async enviarCodigoRecuperacao(email, codigo, nomeUsuario = null) {
        try {
            console.log(`üìß Enviando c√≥digo de recupera√ß√£o para: ${email}`);

            const assunto = `üîë C√≥digo de Recupera√ß√£o - ${this.clinicaNome}`;
            const nomeDisplay = nomeUsuario || email.split('@')[0];

            const htmlContent = this.gerarTemplateRecuperacao(nomeDisplay, codigo);

            // Tentar SendGrid primeiro, depois SMTP
            const resultado = await this.enviarComFallback(email, assunto, htmlContent);

            if (resultado.sucesso) {
                console.log(`‚úÖ C√≥digo enviado com sucesso para ${email}`);
                return {
                    sucesso: true,
                    provider: resultado.provider,
                    messageId: resultado.messageId
                };
            } else {
                throw new Error(resultado.erro);
            }

        } catch (error) {
            console.error('‚ùå Erro ao enviar c√≥digo de recupera√ß√£o:', error.message);
            return {
                sucesso: false,
                erro: error.message
            };
        }
    }

    /**
     * Enviar confirma√ß√£o de altera√ß√£o de senha
     */
    async enviarConfirmacaoAlteracao(email, nomeUsuario = null, ip = null) {
        try {
            const assunto = `‚úÖ Senha Alterada - ${this.clinicaNome}`;
            const nomeDisplay = nomeUsuario || email.split('@')[0];

            const htmlContent = this.gerarTemplateConfirmacao(nomeDisplay, ip);
            const resultado = await this.enviarComFallback(email, assunto, htmlContent);

            console.log('üîç Debug resultado:', JSON.stringify(resultado, null, 2));

            if (resultado.sucesso) {
                console.log(`‚úÖ Confirma√ß√£o enviada para ${email}`);
                return { sucesso: true, provider: resultado.provider };
            } else {
                console.log(`‚ùå Falha no envio: ${resultado.erro}`);
                throw new Error(resultado.erro);
            }

        } catch (error) {
            console.error('‚ùå Erro ao enviar confirma√ß√£o:', error.message);
            return { sucesso: false, erro: error.message };
        }
    }

    /**
     * Enviar alerta de seguran√ßa para admin
     */
    async enviarAlertaAdmin(tipo, detalhes) {
        try {
            const assunto = `üö® Alerta de Seguran√ßa - ${tipo}`;
            const htmlContent = this.gerarTemplateAlerta(tipo, detalhes);

            const resultado = await this.enviarComFallback(
                this.adminEmail, 
                assunto, 
                htmlContent
            );

            return resultado;

        } catch (error) {
            console.error('‚ùå Erro ao enviar alerta:', error.message);
            return { sucesso: false, erro: error.message };
        }
    }

    /**
     * M√©todo principal com fallback SendGrid ‚Üí SMTP
     */
    async enviarComFallback(destinatario, assunto, htmlContent) {
        // Tentar SendGrid primeiro (se configurado)
        if (this.providerPrimario === 'sendgrid') {
            try {
                const msg = {
                    to: destinatario,
                    from: {
                        email: this.emailFrom,
                        name: this.emailFromName
                    },
                    subject: assunto,
                    html: htmlContent
                };

                const response = await sgMail.send(msg);
                
                return {
                    sucesso: true,
                    provider: 'SendGrid',
                    messageId: response[0].headers['x-message-id'],
                    statusCode: response[0].statusCode
                };

            } catch (error) {
                console.warn('‚ö†Ô∏è SendGrid falhou, tentando SMTP...', error.message);
                // Continuar para SMTP fallback
            }
        }

        // Fallback para SMTP
        try {
            const mailOptions = {
                from: `"${this.emailFromName}" <${this.emailFrom}>`,
                to: destinatario,
                subject: assunto,
                html: htmlContent
            };

            const info = await this.transporterSMTP.sendMail(mailOptions);
            
            return {
                sucesso: true,
                provider: 'SMTP',
                messageId: info.messageId
            };

        } catch (error) {
            console.error('‚ùå SMTP tamb√©m falhou:', error.message);
            
            return {
                sucesso: false,
                erro: `Ambos provedores falharam. SendGrid + SMTP: ${error.message}`
            };
        }
    }

    /**
     * Template HTML para c√≥digo de recupera√ß√£o
     */
    gerarTemplateRecuperacao(nomeUsuario, codigo) {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>C√≥digo de Recupera√ß√£o</title>
        </head>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2c5aa0; margin-bottom: 10px;">üîë Recupera√ß√£o de Senha</h1>
                <h2 style="color: #666; font-weight: normal;">${this.clinicaNome}</h2>
            </div>

            <div style="background: #f8f9fa; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
                <p style="font-size: 16px; margin-bottom: 20px;">
                    Ol√° <strong>${nomeUsuario}</strong>,
                </p>
                
                <p style="font-size: 16px; margin-bottom: 20px;">
                    Recebemos uma solicita√ß√£o para recuperar sua senha no Portal M√©dico.
                </p>

                <div style="text-align: center; margin: 30px 0;">
                    <div style="background: white; border: 3px solid #2c5aa0; border-radius: 10px; padding: 20px; display: inline-block;">
                        <p style="margin: 0; font-size: 14px; color: #666; margin-bottom: 10px;">
                            Seu c√≥digo de verifica√ß√£o:
                        </p>
                        <h1 style="margin: 0; font-size: 36px; color: #2c5aa0; letter-spacing: 8px; font-family: monospace;">
                            ${codigo}
                        </h1>
                    </div>
                </div>

                <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0;">
                    <p style="margin: 0; font-size: 14px; color: #856404;">
                        ‚è∞ <strong>Este c√≥digo expira em ${process.env.RECUPERACAO_VALIDADE_MINUTOS || 15} minutos</strong>
                    </p>
                </div>

                <p style="font-size: 14px; color: #666; margin-bottom: 0;">
                    Se voc√™ n√£o solicitou esta recupera√ß√£o, ignore este email ou entre em contato conosco.
                </p>
            </div>

            <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">

            <div style="text-align: center; color: #666; font-size: 14px;">
                <p><strong>${this.clinicaNome}</strong></p>
                <p>${this.clinicaEndereco}</p>
                <p>üìû ${this.clinicaTelefone}</p>
                <p style="font-size: 12px; margin-top: 20px;">
                    Este √© um email autom√°tico do sistema m√©dico. N√£o responda.
                </p>
            </div>

        </body>
        </html>
        `;
    }

    /**
     * Template HTML para confirma√ß√£o de altera√ß√£o
     */
    gerarTemplateConfirmacao(nomeUsuario, ip) {
        const dataHora = new Date().toLocaleString('pt-BR');
        
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Senha Alterada</title>
        </head>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #28a745; margin-bottom: 10px;">‚úÖ Senha Alterada</h1>
                <h2 style="color: #666; font-weight: normal;">${this.clinicaNome}</h2>
            </div>

            <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
                <p style="font-size: 16px; margin-bottom: 20px;">
                    Ol√° <strong>${nomeUsuario}</strong>,
                </p>
                
                <p style="font-size: 16px; margin-bottom: 20px;">
                    Sua senha foi <strong>alterada com sucesso</strong> no Portal M√©dico.
                </p>

                <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="margin-top: 0; color: #495057;">üìã Detalhes da Altera√ß√£o:</h3>
                    <p style="margin: 5px 0;"><strong>Data/Hora:</strong> ${dataHora}</p>
                    ${ip ? `<p style="margin: 5px 0;"><strong>IP:</strong> ${ip}</p>` : ''}
                    <p style="margin: 5px 0;"><strong>M√©todo:</strong> Recupera√ß√£o por c√≥digo</p>
                </div>

                <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0;">
                    <p style="margin: 0; font-size: 14px; color: #856404;">
                        üõ°Ô∏è <strong>Importante:</strong> Se voc√™ n√£o fez esta altera√ß√£o, entre em contato conosco imediatamente.
                    </p>
                </div>
            </div>

            <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">

            <div style="text-align: center; color: #666; font-size: 14px;">
                <p><strong>${this.clinicaNome}</strong></p>
                <p>${this.clinicaEndereco}</p>
                <p>üìû ${this.clinicaTelefone}</p>
            </div>

        </body>
        </html>
        `;
    }

    /**
     * Template para alertas de seguran√ßa (admin)
     */
    gerarTemplateAlerta(tipo, detalhes) {
        const dataHora = new Date().toLocaleString('pt-BR');
        
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Alerta de Seguran√ßa</title>
        </head>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            
            <div style="background: #f8d7da; border: 1px solid #f5c6cb; padding: 20px; border-radius: 10px;">
                <h1 style="color: #721c24; margin-top: 0;">üö® Alerta de Seguran√ßa</h1>
                
                <p><strong>Tipo:</strong> ${tipo}</p>
                <p><strong>Data/Hora:</strong> ${dataHora}</p>
                
                <h3>Detalhes:</h3>
                <pre style="background: white; padding: 15px; border-radius: 5px; overflow-x: auto;">${JSON.stringify(detalhes, null, 2)}</pre>
                
                <p style="margin-bottom: 0; font-size: 14px; color: #721c24;">
                    Este alerta foi gerado automaticamente pelo sistema de seguran√ßa.
                </p>
            </div>

        </body>
        </html>
        `;
    }

    /**
     * Testar configura√ß√£o de email
     */
    async testarConfiguracao() {
        try {
            console.log('üß™ Testando configura√ß√£o de email...');
            
            const emailTeste = this.adminEmail;
            const resultado = await this.enviarComFallback(
                emailTeste,
                'üß™ Teste de Configura√ß√£o - Sistema de Recupera√ß√£o',
                `
                <h2>‚úÖ Configura√ß√£o de Email Funcionando!</h2>
                <p>Data/Hora: ${new Date().toLocaleString('pt-BR')}</p>
                <p>Provider: ${this.providerPrimario}</p>
                <p>Sistema: Portal Dr. Marcio - Recupera√ß√£o de Senha</p>
                `
            );

            if (resultado.sucesso) {
                console.log('‚úÖ Teste de email bem-sucedido!');
                console.log(`üìß Provider usado: ${resultado.provider}`);
                return true;
            } else {
                console.error('‚ùå Teste de email falhou:', resultado.erro);
                return false;
            }

        } catch (error) {
            console.error('‚ùå Erro no teste:', error.message);
            return false;
        }
    }
}

module.exports = EmailRecuperacaoService;
