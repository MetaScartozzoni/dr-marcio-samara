// src/store/agendamentoSlice.jsimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';import agendamentoService from '../services/agendamento.service';// Async Thunksexport const fetchAgendamentos = createAsyncThunk(  'agendamento/fetchAgendamentos',  async (filtros = {}, { rejectWithValue }) => {    try {      const response = await agendamentoService.listarAgendamentos(filtros);      return response.data;    } catch (error) {      return rejectWithValue(error.response.data.erro);    }  });export const criarAgendamento = createAsyncThunk(  'agendamento/criarAgendamento',  async (dadosAgendamento, { rejectWithValue }) => {    try {      const response = await agendamentoService.criarAgendamento(dadosAgendamento);      return response.data;    } catch (error) {      return rejectWithValue(error.response.data.erro);    }  });export const fetchDisponibilidade = createAsyncThunk(  'agendamento/fetchDisponibilidade',  async ({ data_inicio, data_fim }, { rejectWithValue }) => {    try {      const response = await agendamentoService.obterDisponibilidade(data_inicio, data_fim);      return response.data;    } catch (error) {      return rejectWithValue(error.response.data.erro);    }  });const agendamentoSlice = createSlice({  name: 'agendamento',  initialState: {    agendamentos: [],    disponibilidade: [],    servicos: [],    pacientes: [],    loading: false,    error: null,    filtros: {      data_inicio: null,      data_fim: null,      status: '',      paciente_id: ''    }  },  reducers: {    setFiltros: (state, action) => {      state.filtros = { ...state.filtros, ...action.payload };    },    clearError: (state) => {      state.error = null;    },    atualizarStatusAgendamento: (state, action) => {      const { id, status } = action.payload;      const agendamento = state.agendamentos.find(a => a.id === id);      if (agendamento) {        agendamento.status = status;      }    }  },  extraReducers: (builder) => {    builder      // Fetch Agendamentos      .addCase(fetchAgendamentos.pending, (state) => {        state.loading = true;        state.error = null;      })      .addCase(fetchAgendamentos.fulfilled, (state, action) => {        state.loading = false;        state.agendamentos = action.payload;      })      .addCase(fetchAgendamentos.rejected, (state, action) => {        state.loading = false;        state.error = action.payload;      })            // Criar Agendamento      .addCase(criarAgendamento.pending, (state) => {        state.loading = true;        state.error = null;      })      .addCase(criarAgendamento.fulfilled, (state, action) => {        state.loading = false;        state.agendamentos.push(action.payload.agendamento);      })      .addCase(criarAgendamento.rejected, (state, action) => {        state.loading = false;        state.error = action.payload;      })            // Fetch Disponibilidade      .addCase(fetchDisponibilidade.fulfilled, (state, action) => {        state.disponibilidade = action.payload;      });  }});export const { setFiltros, clearError, atualizarStatusAgendamento } = agendamentoSlice.actions;export default agendamentoSlice.reducer;