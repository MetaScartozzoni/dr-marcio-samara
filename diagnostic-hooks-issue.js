// diagnostic-hooks-issue.js
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

console.log('üîç DIAGN√ìSTICO: Hook Authorization Token Issue');
console.log('================================================');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

async function testLoginWithoutHooks() {
  try {
    console.log('üîç Testando login com configura√ß√£o b√°sica...\n');

    // Criar cliente com configura√ß√£o m√≠nima (sem hooks)
    const supabaseBasic = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
        detectSessionInUrl: false
      }
    });

    // Teste 1: Verificar conex√£o b√°sica
    console.log('1Ô∏è‚É£  Testando conex√£o b√°sica...');
    const { error: sessionError } = await supabaseBasic.auth.getSession();

    if (sessionError) {
      console.error('‚ùå Erro na sess√£o:', sessionError.message);
    } else {
      console.log('‚úÖ Conex√£o b√°sica OK');
    }

    // Teste 2: Tentar login com configura√ß√£o b√°sica
    console.log('\n2Ô∏è‚É£  Testando login com configura√ß√£o b√°sica...');
    const testEmail = 'test@example.com';
    const testPassword = 'testpassword123';

    const { error: loginError } = await supabaseBasic.auth.signInWithPassword({
      email: testEmail,
      password: testPassword,
    });

    if (loginError) {
      console.error('‚ùå Erro no login (esperado para email inexistente):', loginError.message);

      if (loginError.message.includes('Hook requires authorization token')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO:');
        console.log('===========================');
        console.log('‚Ä¢ H√° hooks configurados no Supabase que exigem autoriza√ß√£o');
        console.log('‚Ä¢ O cliente atual est√° enviando tokens incorretos');
        console.log('‚Ä¢ Isso pode estar causando o erro 500');

        console.log('\nüîß SOLU√á√ïES:');
        console.log('=============');
        console.log('1. Verificar hooks no Supabase Dashboard');
        console.log('2. Desabilitar hooks problem√°ticos');
        console.log('3. Ajustar permiss√µes dos hooks');
        console.log('4. Usar configura√ß√£o b√°sica do cliente');
      }
    } else {
      console.log('‚úÖ Login b√°sico funcionou (inesperado)');
    }

    console.log('\nüéØ RECOMENDA√á√ïES:');
    console.log('==================');

    console.log('\n1Ô∏è‚É£  Verificar Hooks no Supabase:');
    console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard');
    console.log('   ‚Ä¢ Selecione seu projeto');
    console.log('   ‚Ä¢ V√° para: Database > Hooks');
    console.log('   ‚Ä¢ Verifique se h√° hooks ativos');
    console.log('   ‚Ä¢ Desabilite hooks que podem estar causando problemas');

    console.log('\n2Ô∏è‚É£  Configura√ß√£o Atual do Cliente:');
    console.log('   ‚úÖ Removido redirectTo do cliente');
    console.log('   ‚úÖ Configura√ß√£o simplificada');
    console.log('   ‚úÖ Tratamento de erro melhorado');

    console.log('\n3Ô∏è‚É£  Para Desenvolvimento:');
    console.log('   ‚Ä¢ Use a configura√ß√£o b√°sica se necess√°rio');
    console.log('   ‚Ä¢ Teste em modo inc√≥gnito');
    console.log('   ‚Ä¢ Limpe cache e cookies');

    console.log('\nüö® SE O PROBLEMA PERSISTIR:');
    console.log('=============================');
    console.log('‚Ä¢ V√° ao Supabase Dashboard > Settings > API');
    console.log('‚Ä¢ Verifique as configura√ß√µes de autentica√ß√£o');
    console.log('‚Ä¢ Considere recriar as chaves API');
    console.log('‚Ä¢ Entre em contato com o suporte do Supabase');

  } catch (error) {
    console.error('‚ùå ERRO inesperado:', error.message);
  }
}

testLoginWithoutHooks();
