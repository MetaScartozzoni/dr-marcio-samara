// ============================
// INTEGRADOR SEGURO - N√ÉO MODIFICA SERVER.JS PRINCIPAL
// ============================

const ServidorAutenticacaoSeguro = require('./servidor-auth-seguro');

class IntegradorSeguro {
    constructor(app) {
        this.app = app;
        this.servidorAuth = new ServidorAutenticacaoSeguro();
        this.init();
    }
    
    init() {
        console.log('üîí Inicializando sistema seguro de autentica√ß√£o...');
        
        // Registrar rotas seguras sem modificar server.js
        this.app.use('/secure', this.servidorAuth.getRouter());
        
        // Middleware de seguran√ßa global
        this.app.use(this.middlewareSeguranca.bind(this));
        
        console.log('‚úÖ Sistema seguro inicializado');
    }
    
    middlewareSeguranca(req, res, next) {
        // Log de todas as requisi√ß√µes sens√≠veis
        if (this.isRotaSensivel(req.path)) {
            console.log(`üîç Acesso a rota sens√≠vel: ${req.method} ${req.path} - IP: ${req.ip}`);
        }
        
        // Headers de seguran√ßa
        res.setHeader('X-Content-Type-Options', 'nosniff');
        res.setHeader('X-Frame-Options', 'DENY');
        res.setHeader('X-XSS-Protection', '1; mode=block');
        
        next();
    }
    
    isRotaSensivel(path) {
        const rotasSensiveis = [
            '/api/auth',
            '/api/cadastrar',
            '/api/login',
            '/admin',
            '/secure'
        ];
        
        return rotasSensiveis.some(rota => path.startsWith(rota));
    }
}

// Fun√ß√£o para integrar ao server.js existente
function integrarSeguranca(app) {
    new IntegradorSeguro(app);
}

module.exports = integrarSeguranca;
